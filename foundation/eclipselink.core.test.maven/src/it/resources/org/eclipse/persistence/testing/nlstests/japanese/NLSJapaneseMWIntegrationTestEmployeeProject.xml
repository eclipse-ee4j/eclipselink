<?xml version = '1.0' encoding = 'UTF-8'?>
<project>
   <project-name>Employee</project-name>
   <login>
      <database-login>
         <platform>org.eclipse.persistence.internal.databaseaccess.AccessPlatform</platform>
         <driver-class>sun.jdbc.odbc.JdbcOdbcDriver</driver-class>
         <connection-url>jdbc:odbc:MSACCESS</connection-url>
         <user-name>USERNAME</user-name>
         <password>PASSWORD</password>
         <uses-native-sequencing>false</uses-native-sequencing>
         <sequence-preallocation-size>50</sequence-preallocation-size>
         <sequence-table>ã?¦ã?Šã?¡ã?ªã?Šã?›ã?†ã?Š</sequence-table>
         <sequence-name-field>ã?¦ã?Šã?¡_ã?›ã?‚ã?™ã?Š</sequence-name-field>
         <sequence-counter-field>ã?¦ã?Šã?¡_ã?†ã??ã?ªã?›ã?¨</sequence-counter-field>
         <should-bind-all-parameters>false</should-bind-all-parameters>
         <should-cache-all-statements>false</should-cache-all-statements>
         <uses-byte-array-binding>true</uses-byte-array-binding>
         <uses-string-binding>false</uses-string-binding>
         <uses-streams-for-binding>false</uses-streams-for-binding>
         <should-force-field-names-to-upper-case>false</should-force-field-names-to-upper-case>
         <should-optimize-data-conversion>true</should-optimize-data-conversion>
         <should-trim-strings>true</should-trim-strings>
         <uses-batch-writing>false</uses-batch-writing>
         <uses-jdbc-batch-writing>true</uses-jdbc-batch-writing>
         <uses-external-connection-pooling>false</uses-external-connection-pooling>
         <uses-external-transaction-controller>false</uses-external-transaction-controller>
         <type>org.eclipse.persistence.sessions.DatabaseLogin</type>
      </database-login>
   </login>
   <descriptors>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.Project</java-class>
         <tables>
            <table>ã?Ÿã?¤ã??ã?“</table>
         </tables>
         <primary-key-fields>
            <field>ã?Ÿã?¤ã??ã?“.ã?Ÿã?¤ã??ã?“_ã?‘ã?ˆ</field>
         </primary-key-fields>
         <descriptor-type-value>Normal</descriptor-type-value>
         <sequence-number-field>ã?Ÿã?¤ã??ã?“_ã?‘ã?ˆ</sequence-number-field>
         <sequence-number-name>ã?Ÿã?¤ã??ã?“_ã?¦ã?Šã?¡</sequence-number-name>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>Project</alias>
         <inheritance-policy>
            <descriptor-inheritance-policy>
               <should-read-subclasses>true</should-read-subclasses>
               <should-use-class-name-as-indicator>false</should-use-class-name-as-indicator>
               <class-indicator-field>ã?Ÿã?¤ã??ã?“_ã?¨ã?®ã?Ÿã?Š</class-indicator-field>
               <class-indicator-associations>
                  <typed-association>
                     <association-key>org.eclipse.persistence.testing.models.employee.domain.LargeProject</association-key>
                     <association-value>L</association-value>
                     <association-key-type>java.lang.Class</association-key-type>
                     <association-value-type>java.lang.String</association-value-type>
                  </typed-association>
                  <typed-association>
                     <association-key>org.eclipse.persistence.testing.models.employee.domain.SmallProject</association-key>
                     <association-value>S</association-value>
                     <association-key-type>java.lang.Class</association-key-type>
                     <association-value-type>java.lang.String</association-value-type>
                  </typed-association>
               </class-indicator-associations>
            </descriptor-inheritance-policy>
         </inheritance-policy>
         <interface-policy>
            <descriptor-interface-policy>
               <parent-interfaces>
                  <class>org.eclipse.persistence.testing.models.employee.interfaces.Project</class>
               </parent-interfaces>
            </descriptor-interface-policy>
         </interface-policy>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <locking-policy>
            <descriptor-locking-policy>
               <write-lock-field>ã?«ã?Šã?¤ã?¦ã?‘ã??ã?›</write-lock-field>
               <is-stored-in-cache>true</is-stored-in-cache>
               <type>org.eclipse.persistence.descriptors.VersionLockingPolicy</type>
            </descriptor-locking-policy>
         </locking-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <mappings>
            <database-mapping>
               <attribute-name>description</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã?¤ã??ã?“.ã?ˆã?Šã?¦ã?†ã?¤ã?‘ã?Ÿ</field-name>
               <null-value></null-value>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>id</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã?¤ã??ã?“.ã?Ÿã?¤ã??ã?“_ã?‘ã?ˆ</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>name</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã?¤ã??ã?“.ã?Ÿã?¤ã??ã?“_ã?›ã?‚ã?™ã?Š</field-name>
               <null-value></null-value>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>teamLeader</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
               <is-private-owned>false</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <uses-joining>false</uses-joining>
               <foreign-key-fields>
                  <field>ã?Ÿã?¤ã??ã?“.ã?—ã?ˆã?¤_ã?‘ã?ˆ</field>
               </foreign-key-fields>
               <source-to-target-key-field-associations>
                  <association>
                     <association-key>ã?Ÿã?¤ã??ã?“.ã?—ã?ˆã?¤_ã?‘ã?ˆ</association-key>
                     <association-value>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</association-value>
                  </association>
               </source-to-target-key-field-associations>
               <type>org.eclipse.persistence.mappings.OneToOneMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.Address</java-class>
         <tables>
            <table>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦</table>
         </tables>
         <primary-key-fields>
            <field>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦_ã?‘ã?ˆ</field>
         </primary-key-fields>
         <descriptor-type-value>Normal</descriptor-type-value>
         <sequence-number-field>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦_ã?‘ã?ˆ</sequence-number-field>
         <sequence-number-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦_ã?¦ã?Šã?¡</sequence-number-name>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>Address</alias>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <mappings>
            <database-mapping>
               <attribute-name>city</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?†ã?‘ã?¨ã?®</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>country</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?†ã??ã?ªã?›ã?¨ã?¤ã?®</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>id</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦_ã?‘ã?ˆ</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>postalCode</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?Ÿ_ã?†ã??ã?ˆã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>province</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?Ÿã?¤ã??ã?«ã?‘ã?›ã?†ã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>street</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?¦ã?¨ã?¤ã?Šã?Šã?¨</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.PhoneNumber</java-class>
         <tables>
            <table>ã?Ÿã??ã??ã?›ã?Š</table>
         </tables>
         <primary-key-fields>
            <field>ã?Ÿã??ã??ã?›ã?Š.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
            <field>ã?Ÿã??ã??ã?›ã?Š.ã?¨ã?®ã?Ÿã?Š</field>
         </primary-key-fields>
         <descriptor-type-value>Normal</descriptor-type-value>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>PhoneNumber</alias>
         <amendment-method>modifyPhoneDescriptor</amendment-method>
         <amendment-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployeeSystem</amendment-class>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
               <descriptor-named-queries>
                  <database-query>
                     <query-name>localNumbers</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <query-arguments>
                        <string>ID</string>
                     </query-arguments>
                     <query-argument-types>
                        <values>java.lang.Object</values>
                     </query-argument-types>
                     <reference-class>org.eclipse.persistence.testing.models.employee.domain.PhoneNumber</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>id</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <parameter-name>ID</parameter-name>
                                       <argument-class>deprecated.workbench.expressions.ParameterArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>areaCode</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>613</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
               </descriptor-named-queries>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <query-keys>
            <query-key>
               <name>id</name>
               <field-name>ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field-name>
               <type>org.eclipse.persistence.mappings.querykeys.DirectQueryKey</type>
            </query-key>
         </query-keys>
         <mappings>
            <database-mapping>
               <attribute-name>areaCode</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã??ã??ã?›ã?Š.ã?‚ã?¤ã?Šã?‚_ã?†ã??ã?ˆã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>number</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã??ã??ã?›ã?Š.ã?Ÿ_ã?›ã?ªã?™ã?„ã?Šã?¤</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>type</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Ÿã??ã??ã?›ã?Š.ã?¨ã?®ã?Ÿã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>owner</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
               <is-private-owned>false</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <uses-joining>false</uses-joining>
               <foreign-key-fields>
                  <field>ã?Ÿã??ã??ã?›ã?Š.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </foreign-key-fields>
               <source-to-target-key-field-associations>
                  <association>
                     <association-key>ã?Ÿã??ã??ã?›ã?Š.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</association-key>
                     <association-value>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</association-value>
                  </association>
               </source-to-target-key-field-associations>
               <type>org.eclipse.persistence.mappings.OneToOneMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.EmploymentPeriod</java-class>
         <descriptor-type-value>Aggregate</descriptor-type-value>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>EmploymentPeriod</alias>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <mappings>
            <database-mapping>
               <attribute-name>endDate</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Šã?›ã?ˆ_ã?ˆã?‚ã?¨ã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>startDate</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?¦ã?¨ã?‚ã?¤ã?¨_ã?ˆã?‚ã?¨ã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.LargeProject</java-class>
         <tables>
            <table>ã?—ã?Ÿã?¤ã??ã?“</table>
         </tables>
         <descriptor-type-value>Normal</descriptor-type-value>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>LargeProject</alias>
         <inheritance-policy>
            <descriptor-inheritance-policy>
               <parent-class>org.eclipse.persistence.testing.models.employee.domain.Project</parent-class>
               <should-read-subclasses>false</should-read-subclasses>
               <should-use-class-name-as-indicator>false</should-use-class-name-as-indicator>
            </descriptor-inheritance-policy>
         </inheritance-policy>
         <interface-policy>
            <descriptor-interface-policy>
               <parent-interfaces>
                  <class>org.eclipse.persistence.testing.models.employee.interfaces.LargeProject</class>
               </parent-interfaces>
            </descriptor-interface-policy>
         </interface-policy>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <mappings>
            <database-mapping>
               <attribute-name>budget</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?—ã?Ÿã?¤ã??ã?“.ã?„ã?ªã?ˆã??ã?Šã?¨</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>milestoneVersion</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?—ã?Ÿã?¤ã??ã?“.ã?™ã?‘ã?—ã?Šã?¦ã?¨ã??ã?›ã?Š</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.models.employee.domain.SmallProject</java-class>
         <tables>
            <table>ã?Ÿã?¤ã??ã?“</table>
         </tables>
         <descriptor-type-value>Normal</descriptor-type-value>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.SoftCacheWeakIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>SmallProject</alias>
         <inheritance-policy>
            <descriptor-inheritance-policy>
               <parent-class>org.eclipse.persistence.testing.models.employee.domain.Project</parent-class>
               <should-read-subclasses>false</should-read-subclasses>
               <should-use-class-name-as-indicator>false</should-use-class-name-as-indicator>
            </descriptor-inheritance-policy>
         </inheritance-policy>
         <interface-policy>
            <descriptor-interface-policy>
               <parent-interfaces>
                  <class>org.eclipse.persistence.testing.models.employee.interfaces.SmallProject</class>
               </parent-interfaces>
            </descriptor-interface-policy>
         </interface-policy>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
      <descriptor>
         <java-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</java-class>
         <tables>
            <table>ã?Šã?™ã?Ÿ</table>
            <table>ã?¦ã?‚ã?—ã?‚ã?¤ã?®</table>
         </tables>
         <primary-key-fields>
            <field>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
         </primary-key-fields>
         <descriptor-type-value>Normal</descriptor-type-value>
         <sequence-number-field>ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</sequence-number-field>
         <sequence-number-name>ã?Šã?™ã?Ÿ_ã?¦ã?Šã?¡</sequence-number-name>
         <identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</identity-map-class>
         <remote-identity-map-class>org.eclipse.persistence.internal.identitymaps.FullIdentityMap</remote-identity-map-class>
         <identity-map-size>100</identity-map-size>
         <remote-identity-map-size>100</remote-identity-map-size>
         <should-always-refresh-cache>false</should-always-refresh-cache>
         <should-always-refresh-cache-on-remote>false</should-always-refresh-cache-on-remote>
         <should-only-refresh-cache-if-newer-version>false</should-only-refresh-cache-if-newer-version>
         <should-disable-cache-hits>false</should-disable-cache-hits>
         <should-disable-cache-hits-on-remote>false</should-disable-cache-hits-on-remote>
         <alias>Employee</alias>
         <interface-policy>
            <descriptor-interface-policy>
               <parent-interfaces>
                  <class>org.eclipse.persistence.testing.models.employee.interfaces.Employee</class>
               </parent-interfaces>
            </descriptor-interface-policy>
         </interface-policy>
         <copy-policy>
            <descriptor-copy-policy>
               <type>org.eclipse.persistence.internal.descriptors.CopyPolicy</type>
            </descriptor-copy-policy>
         </copy-policy>
         <locking-policy>
            <descriptor-locking-policy>
               <write-lock-field>ã?«ã?Šã?¤ã?¦ã?‘ã??ã?›</write-lock-field>
               <is-stored-in-cache>true</is-stored-in-cache>
               <type>org.eclipse.persistence.descriptors.VersionLockingPolicy</type>
            </descriptor-locking-policy>
         </locking-policy>
         <instantiation-policy>
            <descriptor-instantiation-policy>
               <type>org.eclipse.persistence.internal.descriptors.InstantiationPolicy</type>
            </descriptor-instantiation-policy>
         </instantiation-policy>
         <query-manager>
            <descriptor-query-manager>
               <existence-check>Check cache</existence-check>
               <descriptor-named-queries>
                  <database-query>
                     <query-name>cacheQueryResultsQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <should-cache-query-results>true</should-cache-query-results>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetNotLike</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Not Like</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>memoryQueryThrowExceptionQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetNotEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Not Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetNotNull</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <expression-list>
                              <expression>
                                 <operator-type>Not Null</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>firstName</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <expression-class>deprecated.workbench.expressions.UnaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestAnyOfAllowingNoneEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>areaCode</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>phoneNumbers</query-key-name>
                                             <outer-join>true</outer-join>
                                             <to-many>true</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>613</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>memoryQueryReturnConfirmedQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>2</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetIsNull</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <expression-list>
                              <expression>
                                 <operator-type>Is Null</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>address</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <expression-class>deprecated.workbench.expressions.UnaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>memoryQueryReturnNotConfirmedQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>3</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetGreaterThanEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Greater Than Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>salary</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.Integer</type>
                                       <value>0</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>maxRowsQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <max-rows>4</max-rows>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetAllowingNullEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>true</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetLike</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Like</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetLessThan</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Less Than</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>salary</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.Integer</type>
                                       <value>15</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>shouldPrepareQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetLessThanEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Less Than Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>salary</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.Integer</type>
                                       <value>15</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetNot</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>NAND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>city</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>address</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>Toronto</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>useDistinctQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>1</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>queryTimeOutQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>1</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>OR</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>OR</operator-type>
                                 <expression-list>
                                    <expression>
                                       <operator-type>OR</operator-type>
                                       <expression-list>
                                          <expression>
                                             <operator-type>OR</operator-type>
                                             <expression-list>
                                                <expression>
                                                   <operator-type>OR</operator-type>
                                                   <expression-list>
                                                      <expression>
                                                         <operator-type>OR</operator-type>
                                                         <expression-list>
                                                            <expression>
                                                               <operator-type>OR</operator-type>
                                                               <expression-list>
                                                                  <expression>
                                                                     <operator-type>AND</operator-type>
                                                                     <expression-list>
                                                                        <expression>
                                                                           <operator-type>AND</operator-type>
                                                                           <expression-list>
                                                                              <expression>
                                                                                 <operator-type>Equals Ignore Case</operator-type>
                                                                                 <first-argument>
                                                                                    <argument>
                                                                                       <query-key-name>province</query-key-name>
                                                                                       <base-query-key>
                                                                                          <argument>
                                                                                             <query-key-name>address</query-key-name>
                                                                                             <outer-join>false</outer-join>
                                                                                             <to-many>false</to-many>
                                                                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                          </argument>
                                                                                       </base-query-key>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </first-argument>
                                                                                 <second-argument>
                                                                                    <argument>
                                                                                       <type>java.lang.String</type>
                                                                                       <value>BC</value>
                                                                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </second-argument>
                                                                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                              </expression>
                                                                              <expression>
                                                                                 <operator-type>Equal</operator-type>
                                                                                 <first-argument>
                                                                                    <argument>
                                                                                       <query-key-name>firstName</query-key-name>
                                                                                       <base-query-key>
                                                                                          <argument>
                                                                                             <query-key-name>manager</query-key-name>
                                                                                             <outer-join>false</outer-join>
                                                                                             <to-many>false</to-many>
                                                                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                          </argument>
                                                                                       </base-query-key>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </first-argument>
                                                                                 <second-argument>
                                                                                    <argument>
                                                                                       <type>java.lang.String</type>
                                                                                       <value>Bob</value>
                                                                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </second-argument>
                                                                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                              </expression>
                                                                           </expression-list>
                                                                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                        <expression>
                                                                           <operator-type>Equal</operator-type>
                                                                           <first-argument>
                                                                              <argument>
                                                                                 <query-key-name>areaCode</query-key-name>
                                                                                 <base-query-key>
                                                                                    <argument>
                                                                                       <query-key-name>phoneNumbers</query-key-name>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>true</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </base-query-key>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </first-argument>
                                                                           <second-argument>
                                                                              <argument>
                                                                                 <type>java.lang.String</type>
                                                                                 <value>604</value>
                                                                                 <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </second-argument>
                                                                           <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                     </expression-list>
                                                                     <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                                  </expression>
                                                                  <expression>
                                                                     <operator-type>AND</operator-type>
                                                                     <expression-list>
                                                                        <expression>
                                                                           <operator-type>AND</operator-type>
                                                                           <expression-list>
                                                                              <expression>
                                                                                 <operator-type>Equals Ignore Case</operator-type>
                                                                                 <first-argument>
                                                                                    <argument>
                                                                                       <query-key-name>province</query-key-name>
                                                                                       <base-query-key>
                                                                                          <argument>
                                                                                             <query-key-name>address</query-key-name>
                                                                                             <outer-join>false</outer-join>
                                                                                             <to-many>false</to-many>
                                                                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                          </argument>
                                                                                       </base-query-key>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </first-argument>
                                                                                 <second-argument>
                                                                                    <argument>
                                                                                       <type>java.lang.String</type>
                                                                                       <value>ON</value>
                                                                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </second-argument>
                                                                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                              </expression>
                                                                              <expression>
                                                                                 <operator-type>Equal</operator-type>
                                                                                 <first-argument>
                                                                                    <argument>
                                                                                       <query-key-name>firstName</query-key-name>
                                                                                       <base-query-key>
                                                                                          <argument>
                                                                                             <query-key-name>manager</query-key-name>
                                                                                             <outer-join>false</outer-join>
                                                                                             <to-many>false</to-many>
                                                                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                          </argument>
                                                                                       </base-query-key>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </first-argument>
                                                                                 <second-argument>
                                                                                    <argument>
                                                                                       <type>java.lang.String</type>
                                                                                       <value>Jill</value>
                                                                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </second-argument>
                                                                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                              </expression>
                                                                           </expression-list>
                                                                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                        <expression>
                                                                           <operator-type>Equal</operator-type>
                                                                           <first-argument>
                                                                              <argument>
                                                                                 <query-key-name>areaCode</query-key-name>
                                                                                 <base-query-key>
                                                                                    <argument>
                                                                                       <query-key-name>phoneNumbers</query-key-name>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>true</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </base-query-key>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </first-argument>
                                                                           <second-argument>
                                                                              <argument>
                                                                                 <type>java.lang.String</type>
                                                                                 <value>416</value>
                                                                                 <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </second-argument>
                                                                           <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                     </expression-list>
                                                                     <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                                  </expression>
                                                               </expression-list>
                                                               <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                            </expression>
                                                            <expression>
                                                               <operator-type>AND</operator-type>
                                                               <expression-list>
                                                                  <expression>
                                                                     <operator-type>AND</operator-type>
                                                                     <expression-list>
                                                                        <expression>
                                                                           <operator-type>Equals Ignore Case</operator-type>
                                                                           <first-argument>
                                                                              <argument>
                                                                                 <query-key-name>city</query-key-name>
                                                                                 <base-query-key>
                                                                                    <argument>
                                                                                       <query-key-name>address</query-key-name>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </base-query-key>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </first-argument>
                                                                           <second-argument>
                                                                              <argument>
                                                                                 <type>java.lang.String</type>
                                                                                 <value>Ottawa</value>
                                                                                 <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </second-argument>
                                                                           <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                        <expression>
                                                                           <operator-type>Equal</operator-type>
                                                                           <first-argument>
                                                                              <argument>
                                                                                 <query-key-name>firstName</query-key-name>
                                                                                 <base-query-key>
                                                                                    <argument>
                                                                                       <query-key-name>manager</query-key-name>
                                                                                       <outer-join>false</outer-join>
                                                                                       <to-many>false</to-many>
                                                                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                                    </argument>
                                                                                 </base-query-key>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </first-argument>
                                                                           <second-argument>
                                                                              <argument>
                                                                                 <type>java.lang.String</type>
                                                                                 <value>Sarah</value>
                                                                                 <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </second-argument>
                                                                           <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                        </expression>
                                                                     </expression-list>
                                                                     <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                                  </expression>
                                                                  <expression>
                                                                     <operator-type>Equal</operator-type>
                                                                     <first-argument>
                                                                        <argument>
                                                                           <query-key-name>areaCode</query-key-name>
                                                                           <base-query-key>
                                                                              <argument>
                                                                                 <query-key-name>phoneNumbers</query-key-name>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>true</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </base-query-key>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>false</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </first-argument>
                                                                     <second-argument>
                                                                        <argument>
                                                                           <type>java.lang.String</type>
                                                                           <value>613</value>
                                                                           <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </second-argument>
                                                                     <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                  </expression>
                                                               </expression-list>
                                                               <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                            </expression>
                                                         </expression-list>
                                                         <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                      </expression>
                                                      <expression>
                                                         <operator-type>AND</operator-type>
                                                         <expression-list>
                                                            <expression>
                                                               <operator-type>AND</operator-type>
                                                               <expression-list>
                                                                  <expression>
                                                                     <operator-type>Equals Ignore Case</operator-type>
                                                                     <first-argument>
                                                                        <argument>
                                                                           <query-key-name>city</query-key-name>
                                                                           <base-query-key>
                                                                              <argument>
                                                                                 <query-key-name>address</query-key-name>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </base-query-key>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>false</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </first-argument>
                                                                     <second-argument>
                                                                        <argument>
                                                                           <type>java.lang.String</type>
                                                                           <value>Toronto</value>
                                                                           <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </second-argument>
                                                                     <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                  </expression>
                                                                  <expression>
                                                                     <operator-type>Equal</operator-type>
                                                                     <first-argument>
                                                                        <argument>
                                                                           <query-key-name>firstName</query-key-name>
                                                                           <base-query-key>
                                                                              <argument>
                                                                                 <query-key-name>manager</query-key-name>
                                                                                 <outer-join>false</outer-join>
                                                                                 <to-many>false</to-many>
                                                                                 <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                              </argument>
                                                                           </base-query-key>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>false</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </first-argument>
                                                                     <second-argument>
                                                                        <argument>
                                                                           <type>java.lang.String</type>
                                                                           <value>May</value>
                                                                           <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </second-argument>
                                                                     <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                                  </expression>
                                                               </expression-list>
                                                               <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                            </expression>
                                                            <expression>
                                                               <operator-type>Equal</operator-type>
                                                               <first-argument>
                                                                  <argument>
                                                                     <query-key-name>areaCode</query-key-name>
                                                                     <base-query-key>
                                                                        <argument>
                                                                           <query-key-name>phoneNumbers</query-key-name>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>true</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </base-query-key>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>false</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </first-argument>
                                                               <second-argument>
                                                                  <argument>
                                                                     <type>java.lang.String</type>
                                                                     <value>416</value>
                                                                     <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </second-argument>
                                                               <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                            </expression>
                                                         </expression-list>
                                                         <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                      </expression>
                                                   </expression-list>
                                                   <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                </expression>
                                                <expression>
                                                   <operator-type>AND</operator-type>
                                                   <expression-list>
                                                      <expression>
                                                         <operator-type>AND</operator-type>
                                                         <expression-list>
                                                            <expression>
                                                               <operator-type>Equals Ignore Case</operator-type>
                                                               <first-argument>
                                                                  <argument>
                                                                     <query-key-name>province</query-key-name>
                                                                     <base-query-key>
                                                                        <argument>
                                                                           <query-key-name>address</query-key-name>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>false</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </base-query-key>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>false</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </first-argument>
                                                               <second-argument>
                                                                  <argument>
                                                                     <type>java.lang.String</type>
                                                                     <value>AB</value>
                                                                     <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </second-argument>
                                                               <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                            </expression>
                                                            <expression>
                                                               <operator-type>Equal</operator-type>
                                                               <first-argument>
                                                                  <argument>
                                                                     <query-key-name>firstName</query-key-name>
                                                                     <base-query-key>
                                                                        <argument>
                                                                           <query-key-name>manager</query-key-name>
                                                                           <outer-join>false</outer-join>
                                                                           <to-many>false</to-many>
                                                                           <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                        </argument>
                                                                     </base-query-key>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>false</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </first-argument>
                                                               <second-argument>
                                                                  <argument>
                                                                     <type>java.lang.String</type>
                                                                     <value>John</value>
                                                                     <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </second-argument>
                                                               <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                            </expression>
                                                         </expression-list>
                                                         <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                      </expression>
                                                      <expression>
                                                         <operator-type>Equal</operator-type>
                                                         <first-argument>
                                                            <argument>
                                                               <query-key-name>areaCode</query-key-name>
                                                               <base-query-key>
                                                                  <argument>
                                                                     <query-key-name>phoneNumbers</query-key-name>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>true</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </base-query-key>
                                                               <outer-join>false</outer-join>
                                                               <to-many>false</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </first-argument>
                                                         <second-argument>
                                                            <argument>
                                                               <type>java.lang.String</type>
                                                               <value>519</value>
                                                               <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </second-argument>
                                                         <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                      </expression>
                                                   </expression-list>
                                                   <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                </expression>
                                             </expression-list>
                                             <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                          </expression>
                                          <expression>
                                             <operator-type>AND</operator-type>
                                             <expression-list>
                                                <expression>
                                                   <operator-type>AND</operator-type>
                                                   <expression-list>
                                                      <expression>
                                                         <operator-type>Equals Ignore Case</operator-type>
                                                         <first-argument>
                                                            <argument>
                                                               <query-key-name>city</query-key-name>
                                                               <base-query-key>
                                                                  <argument>
                                                                     <query-key-name>address</query-key-name>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>false</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </base-query-key>
                                                               <outer-join>false</outer-join>
                                                               <to-many>false</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </first-argument>
                                                         <second-argument>
                                                            <argument>
                                                               <type>java.lang.String</type>
                                                               <value>Calgary</value>
                                                               <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </second-argument>
                                                         <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                      </expression>
                                                      <expression>
                                                         <operator-type>Equal</operator-type>
                                                         <first-argument>
                                                            <argument>
                                                               <query-key-name>lastName</query-key-name>
                                                               <base-query-key>
                                                                  <argument>
                                                                     <query-key-name>manager</query-key-name>
                                                                     <outer-join>false</outer-join>
                                                                     <to-many>false</to-many>
                                                                     <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                                  </argument>
                                                               </base-query-key>
                                                               <outer-join>false</outer-join>
                                                               <to-many>false</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </first-argument>
                                                         <second-argument>
                                                            <argument>
                                                               <type>java.lang.String</type>
                                                               <value>Hay</value>
                                                               <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </second-argument>
                                                         <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                      </expression>
                                                   </expression-list>
                                                   <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                                </expression>
                                                <expression>
                                                   <operator-type>Equal</operator-type>
                                                   <first-argument>
                                                      <argument>
                                                         <query-key-name>areaCode</query-key-name>
                                                         <base-query-key>
                                                            <argument>
                                                               <query-key-name>phoneNumbers</query-key-name>
                                                               <outer-join>false</outer-join>
                                                               <to-many>true</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </base-query-key>
                                                         <outer-join>false</outer-join>
                                                         <to-many>false</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </first-argument>
                                                   <second-argument>
                                                      <argument>
                                                         <type>java.lang.String</type>
                                                         <value>416</value>
                                                         <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </second-argument>
                                                   <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                </expression>
                                             </expression-list>
                                             <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                          </expression>
                                       </expression-list>
                                       <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                    </expression>
                                    <expression>
                                       <operator-type>AND</operator-type>
                                       <expression-list>
                                          <expression>
                                             <operator-type>AND</operator-type>
                                             <expression-list>
                                                <expression>
                                                   <operator-type>Equals Ignore Case</operator-type>
                                                   <first-argument>
                                                      <argument>
                                                         <query-key-name>province</query-key-name>
                                                         <base-query-key>
                                                            <argument>
                                                               <query-key-name>address</query-key-name>
                                                               <outer-join>false</outer-join>
                                                               <to-many>false</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </base-query-key>
                                                         <outer-join>false</outer-join>
                                                         <to-many>false</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </first-argument>
                                                   <second-argument>
                                                      <argument>
                                                         <type>java.lang.String</type>
                                                         <value>MB</value>
                                                         <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </second-argument>
                                                   <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                </expression>
                                                <expression>
                                                   <operator-type>Equal</operator-type>
                                                   <first-argument>
                                                      <argument>
                                                         <query-key-name>firstName</query-key-name>
                                                         <base-query-key>
                                                            <argument>
                                                               <query-key-name>manager</query-key-name>
                                                               <outer-join>false</outer-join>
                                                               <to-many>false</to-many>
                                                               <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                            </argument>
                                                         </base-query-key>
                                                         <outer-join>false</outer-join>
                                                         <to-many>false</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </first-argument>
                                                   <second-argument>
                                                      <argument>
                                                         <type>java.lang.String</type>
                                                         <value>James</value>
                                                         <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </second-argument>
                                                   <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                                </expression>
                                             </expression-list>
                                             <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                          </expression>
                                          <expression>
                                             <operator-type>Equal</operator-type>
                                             <first-argument>
                                                <argument>
                                                   <query-key-name>areaCode</query-key-name>
                                                   <base-query-key>
                                                      <argument>
                                                         <query-key-name>phoneNumbers</query-key-name>
                                                         <outer-join>false</outer-join>
                                                         <to-many>true</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </base-query-key>
                                                   <outer-join>false</outer-join>
                                                   <to-many>false</to-many>
                                                   <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                </argument>
                                             </first-argument>
                                             <second-argument>
                                                <argument>
                                                   <type>java.lang.String</type>
                                                   <value>204</value>
                                                   <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                </argument>
                                             </second-argument>
                                             <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                          </expression>
                                       </expression-list>
                                       <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                    </expression>
                                 </expression-list>
                                 <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                              </expression>
                              <expression>
                                 <operator-type>AND</operator-type>
                                 <expression-list>
                                    <expression>
                                       <operator-type>AND</operator-type>
                                       <expression-list>
                                          <expression>
                                             <operator-type>Equals Ignore Case</operator-type>
                                             <first-argument>
                                                <argument>
                                                   <query-key-name>province</query-key-name>
                                                   <base-query-key>
                                                      <argument>
                                                         <query-key-name>address</query-key-name>
                                                         <outer-join>false</outer-join>
                                                         <to-many>false</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </base-query-key>
                                                   <outer-join>false</outer-join>
                                                   <to-many>false</to-many>
                                                   <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                </argument>
                                             </first-argument>
                                             <second-argument>
                                                <argument>
                                                   <type>java.lang.String</type>
                                                   <value>BC</value>
                                                   <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                </argument>
                                             </second-argument>
                                             <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                          </expression>
                                          <expression>
                                             <operator-type>Equal</operator-type>
                                             <first-argument>
                                                <argument>
                                                   <query-key-name>firstName</query-key-name>
                                                   <base-query-key>
                                                      <argument>
                                                         <query-key-name>manager</query-key-name>
                                                         <outer-join>false</outer-join>
                                                         <to-many>false</to-many>
                                                         <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                      </argument>
                                                   </base-query-key>
                                                   <outer-join>false</outer-join>
                                                   <to-many>false</to-many>
                                                   <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                </argument>
                                             </first-argument>
                                             <second-argument>
                                                <argument>
                                                   <type>java.lang.String</type>
                                                   <value>Bob</value>
                                                   <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                                </argument>
                                             </second-argument>
                                             <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                          </expression>
                                       </expression-list>
                                       <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                                    </expression>
                                    <expression>
                                       <operator-type>Equal</operator-type>
                                       <first-argument>
                                          <argument>
                                             <query-key-name>areaCode</query-key-name>
                                             <base-query-key>
                                                <argument>
                                                   <query-key-name>phoneNumbers</query-key-name>
                                                   <outer-join>false</outer-join>
                                                   <to-many>true</to-many>
                                                   <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                                </argument>
                                             </base-query-key>
                                             <outer-join>false</outer-join>
                                             <to-many>false</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </first-argument>
                                       <second-argument>
                                          <argument>
                                             <type>java.lang.String</type>
                                             <value>416</value>
                                             <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                          </argument>
                                       </second-argument>
                                       <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                                    </expression>
                                 </expression-list>
                                 <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>refreshIdentityMapResultsQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>true</refresh-identity-map>
                     <refresh-remote-identity-map>true</refresh-remote-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>memoryQueryTriggerIndirectionQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>1</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestAnyOfEqual</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Equal</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>areaCode</query-key-name>
                                       <base-query-key>
                                          <argument>
                                             <query-key-name>phoneNumbers</query-key-name>
                                             <outer-join>false</outer-join>
                                             <to-many>true</to-many>
                                             <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                          </argument>
                                       </base-query-key>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.String</type>
                                       <value>613</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>doNotUseDistinctQuery</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>2</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <type>org.eclipse.persistence.queries.ReadAllQuery</type>
                  </database-query>
                  <database-query>
                     <query-name>PersistenceTestGetGreaterThan</query-name>
                     <query-should-maintain-cache>true</query-should-maintain-cache>
                     <cascade-policy>1</cascade-policy>
                     <should-bind-all-parameters>false</should-bind-all-parameters>
                     <should-cache-statement>false</should-cache-statement>
                     <should-use-wrapper-policy>true</should-use-wrapper-policy>
                     <query-timeout>0</query-timeout>
                     <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
                     <refresh-identity-map>false</refresh-identity-map>
                     <cache-usage>2</cache-usage>
                     <lock-mode>0</lock-mode>
                     <distinct-state>0</distinct-state>
                     <query-indirection>
                        <in-memory-query-indirection>
                           <policy>0</policy>
                        </in-memory-query-indirection>
                     </query-indirection>
                     <main-expression>
                        <expression>
                           <operator-type>AND</operator-type>
                           <expression-list>
                              <expression>
                                 <operator-type>Greater Than</operator-type>
                                 <first-argument>
                                    <argument>
                                       <query-key-name>salary</query-key-name>
                                       <outer-join>false</outer-join>
                                       <to-many>false</to-many>
                                       <argument-class>deprecated.workbench.expressions.QueryableArgumentRepresentation</argument-class>
                                    </argument>
                                 </first-argument>
                                 <second-argument>
                                    <argument>
                                       <type>java.lang.Integer</type>
                                       <value>0</value>
                                       <argument-class>deprecated.workbench.expressions.LiteralArgumentRepresentation</argument-class>
                                    </argument>
                                 </second-argument>
                                 <expression-class>deprecated.workbench.expressions.BinaryExpressionRepresentation</expression-class>
                              </expression>
                           </expression-list>
                           <expression-class>deprecated.workbench.expressions.CompoundExpressionRepresentation</expression-class>
                        </expression>
                     </main-expression>
                     <type>org.eclipse.persistence.queries.ReadObjectQuery</type>
                  </database-query>
               </descriptor-named-queries>
            </descriptor-query-manager>
         </query-manager>
         <event-manager>
            <descriptor-event-manager empty-aggregate="true"/>
         </event-manager>
         <mappings>
            <database-mapping>
               <attribute-name>firstName</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Šã?™ã?Ÿ.ã?‹_ã?›ã?‚ã?™ã?Š</field-name>
               <null-value></null-value>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>id</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>lastName</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Šã?™ã?Ÿ.ã?—_ã?›ã?‚ã?™ã?Š</field-name>
               <null-value></null-value>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>salary</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?¦ã?‚ã?—ã?‚ã?¤ã?®.ã?¦ã?‚ã?—ã?‚ã?¤ã?®</field-name>
               <type>org.eclipse.persistence.mappings.DirectToFieldMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>gender</attribute-name>
               <read-only>false</read-only>
               <field-name>ã?Šã?™ã?Ÿ.ã??ã?Šã?›ã?ˆã?Šã?¤</field-name>
               <field-to-attribute-value-associations>
                  <typed-association>
                     <association-key>M</association-key>
                     <association-value>Male</association-value>
                     <association-key-type>java.lang.String</association-key-type>
                     <association-value-type>java.lang.String</association-value-type>
                  </typed-association>
                  <typed-association>
                     <association-key>F</association-key>
                     <association-value>Female</association-value>
                     <association-key-type>java.lang.String</association-key-type>
                     <association-value-type>java.lang.String</association-value-type>
                  </typed-association>
               </field-to-attribute-value-associations>
               <type>org.eclipse.persistence.mappings.ObjectTypeMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>normalHours</attribute-name>
               <read-only>false</read-only>
               <attribute-method>buildNormalHours</attribute-method>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.NoIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <field-to-method-associations>
                  <association>
                     <association-key>ã?Šã?™ã?Ÿ.ã?¦ã?¨ã?‚ã?¤ã?¨_ã?¨ã?‘ã?™ã?Š</association-key>
                     <association-value>getStartTime</association-value>
                  </association>
                  <association>
                     <association-key>ã?Šã?™ã?Ÿ.ã?Šã?›ã?ˆ_ã?¨ã?‘ã?™ã?Š</association-key>
                     <association-value>getEndTime</association-value>
                  </association>
               </field-to-method-associations>
               <type>org.eclipse.persistence.mappings.TransformationMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>period</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.models.employee.domain.EmploymentPeriod</reference-class>
               <is-null-allowed>true</is-null-allowed>
               <type>org.eclipse.persistence.mappings.AggregateObjectMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>responsibilitiesList</attribute-name>
               <read-only>false</read-only>
               <is-private-owned>true</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <container-policy>
                  <mapping-container-policy>
                     <container-class>java.util.Vector</container-class>
                     <type>org.eclipse.persistence.internal.queries.ListContainerPolicy</type>
                  </mapping-container-policy>
               </container-policy>
               <reference-table>ã?¤ã?Šã?¦ã?Ÿã??ã?›ã?¦</reference-table>
               <direct-field>ã?¤ã?Šã?¦ã?Ÿã??ã?›ã?¦.ã?ˆã?Šã?¦ã?†ã?¤ã?‘ã?Ÿ</direct-field>
               <source-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </source-key-fields>
               <reference-key-fields>
                  <field>ã?¤ã?Šã?¦ã?Ÿã??ã?›ã?¦.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </reference-key-fields>
               <type>org.eclipse.persistence.mappings.DirectCollectionMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>address</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.models.employee.domain.Address</reference-class>
               <is-private-owned>true</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <uses-joining>false</uses-joining>
               <foreign-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?‚ã?ˆã?ˆã?¤_ã?‘ã?ˆ</field>
               </foreign-key-fields>
               <source-to-target-key-field-associations>
                  <association>
                     <association-key>ã?Šã?™ã?Ÿ.ã?‚ã?ˆã?ˆã?¤_ã?‘ã?ˆ</association-key>
                     <association-value>ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦.ã?‚ã?ˆã?ˆã?¤ã?Šã?¦ã?¦_ã?‘ã?ˆ</association-value>
                  </association>
               </source-to-target-key-field-associations>
               <type>org.eclipse.persistence.mappings.OneToOneMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>manager</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
               <is-private-owned>false</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <uses-joining>false</uses-joining>
               <foreign-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?™ã?‚ã?›ã?‚ã??ã?Šã?¤_ã?‘ã?ˆ</field>
               </foreign-key-fields>
               <source-to-target-key-field-associations>
                  <association>
                     <association-key>ã?Šã?™ã?Ÿ.ã?™ã?‚ã?›ã?‚ã??ã?Šã?¤_ã?‘ã?ˆ</association-key>
                     <association-value>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</association-value>
                  </association>
               </source-to-target-key-field-associations>
               <type>org.eclipse.persistence.mappings.OneToOneMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>managedEmployees</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.tests.nls.japanese.NLSEmployee</reference-class>
               <is-private-owned>false</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <container-policy>
                  <mapping-container-policy>
                     <container-class>java.util.Vector</container-class>
                     <type>org.eclipse.persistence.internal.queries.ListContainerPolicy</type>
                  </mapping-container-policy>
               </container-policy>
               <source-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </source-key-fields>
               <target-foreign-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?™ã?‚ã?›ã?‚ã??ã?Šã?¤_ã?‘ã?ˆ</field>
               </target-foreign-key-fields>
               <type>org.eclipse.persistence.mappings.OneToManyMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>phoneNumbers</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.models.employee.domain.PhoneNumber</reference-class>
               <is-private-owned>true</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <container-policy>
                  <mapping-container-policy>
                     <container-class>java.util.Vector</container-class>
                     <type>org.eclipse.persistence.internal.queries.ListContainerPolicy</type>
                  </mapping-container-policy>
               </container-policy>
               <source-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </source-key-fields>
               <target-foreign-key-fields>
                  <field>ã?Ÿã??ã??ã?›ã?Š.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </target-foreign-key-fields>
               <type>org.eclipse.persistence.mappings.OneToManyMapping</type>
            </database-mapping>
            <database-mapping>
               <attribute-name>projects</attribute-name>
               <read-only>false</read-only>
               <reference-class>org.eclipse.persistence.testing.models.employee.domain.Project</reference-class>
               <is-private-owned>false</is-private-owned>
               <uses-batch-reading>false</uses-batch-reading>
               <indirection-policy>
                  <mapping-indirection-policy>
                     <type>org.eclipse.persistence.internal.indirection.BasicIndirectionPolicy</type>
                  </mapping-indirection-policy>
               </indirection-policy>
               <container-policy>
                  <mapping-container-policy>
                     <container-class>java.util.Vector</container-class>
                     <type>org.eclipse.persistence.internal.queries.ListContainerPolicy</type>
                  </mapping-container-policy>
               </container-policy>
               <relation-table>ã?Ÿ_ã?Šã?™ã?Ÿ</relation-table>
               <source-key-fields>
                  <field>ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </source-key-fields>
               <source-relation-key-fields>
                  <field>ã?Ÿ_ã?Šã?™ã?Ÿ.ã?Šã?™ã?Ÿ_ã?‘ã?ˆ</field>
               </source-relation-key-fields>
               <target-key-fields>
                  <field>ã?Ÿã?¤ã??ã?“.ã?Ÿã?¤ã??ã?“_ã?‘ã?ˆ</field>
               </target-key-fields>
               <target-relation-key-fields>
                  <field>ã?Ÿ_ã?Šã?™ã?Ÿ.ã?Ÿã?¤ã??ã?“_ã?‘ã?ˆ</field>
               </target-relation-key-fields>
               <type>org.eclipse.persistence.mappings.ManyToManyMapping</type>
            </database-mapping>
         </mappings>
         <type>org.eclipse.persistence.publicinterface.Descriptor</type>
      </descriptor>
   </descriptors>
</project>
