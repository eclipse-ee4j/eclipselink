/*
 * Copyright (c) 2025 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0,
 * or the Eclipse Distribution License v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
 */

// Contributors:
//     Oracle - initial API and implementation
package org.eclipse.persistence.testing.tests.jpa.deadlock.diagnostic;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Query;

import org.eclipse.persistence.internal.sessions.AbstractSession;
import org.eclipse.persistence.jpa.JpaEntityManager;
import org.eclipse.persistence.logging.AbstractSessionLog;
import org.eclipse.persistence.testing.framework.jpa.junit.JUnitTestCase;
import org.eclipse.persistence.testing.models.jpa.deadlock.diagnostic.weaving.EquipmentCacheKey;
import org.eclipse.persistence.testing.models.jpa.deadlock.diagnostic.weaving.PortCacheKey;
import org.eclipse.persistence.testing.models.jpa.deadlock.diagnostic.weaving.impl.EquipmentCacheKeyDAO;
import org.eclipse.persistence.testing.models.jpa.deadlock.diagnostic.weaving.impl.PortCacheKeyDAO;

import junit.framework.Test;
import junit.framework.TestSuite;

/**
 * INTERNAL:
 * This is tests which ensures, that {@linkplain org.eclipse.persistence.internal.helper.ReadLockManager}  doesn't store in
 * ${@code Vector<ConcurrencyManager> readLocks} {@linkplain org.eclipse.persistence.internal.identitymaps.CacheKey} instance with {@code key == null}.
 * Test is based on log capture handled by {@linkplain org.eclipse.persistence.testing.tests.jpa.deadlock.diagnostic.LogWrapper}.
 * Required conditions which led into NPE in {@linkplain org.eclipse.persistence.internal.helper.ReadLockManager} before fix were:
 * <ul>
 * <li>Entity ID is generated by {@code @GeneratedValue}</li>
 * <li>L2 cache is enabled</li>
 * <li>Weaving is enabled</li>
 * <li>Entity model and sequence of operations described in the test bellow.</li>
 * </ul>
 */
public class CacheKeyNullKeyTest extends JUnitTestCase {

    public CacheKeyNullKeyTest() {
    }

    public CacheKeyNullKeyTest(String name) {
        super(name);
    }

    @Override
    public String getPersistenceUnitName() {
        return "cachekeynullkey-pu";
    }

    public static Test suite() {
        TestSuite suite = new TestSuite();
        suite.setName("CacheKeyNullKeyTest");
        suite.addTest(new CacheKeyNullKeyTest("testCacheKeyNullKey"));
        return suite;
    }

    public void testCacheKeyNullKey() throws InterruptedException {
        EntityManagerFactory factory = getEntityManagerFactory();

        // Clean up first
        cleanupEquipmentAndPorts(factory);

        // Create a piece equipment with one port.
        createEquipment(factory);

        // Add two ports to the equipment
        addPorts(factory);

        // Fetch the equipment and validate there is no null elements in
        // the ArrayList of Port.
        verifyPorts(factory);
    }

    protected void cleanupEquipmentAndPorts(EntityManagerFactory factory) {
        EntityManager em = null;

        try {
            em = factory.createEntityManager();
            beginTransaction(em);

            em.createQuery("DELETE FROM PortCacheKeyDAO").executeUpdate();
            em.createQuery("DELETE FROM EquipmentCacheKeyDAO").executeUpdate();

            commitTransaction(em);
        } catch (RuntimeException e) {
            if (isTransactionActive(em)) {
                rollbackTransaction(em);
            }
            throw e;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    protected void createEquipment(EntityManagerFactory factory) {
        EntityManager em = null;

        try {
            em = factory.createEntityManager();

            beginTransaction(em);

            EquipmentCacheKey eq = new EquipmentCacheKeyDAO();
            eq.setId("eq");

            PortCacheKey portCacheKey = new PortCacheKeyDAO();
            portCacheKey.setId("p1");
            portCacheKey.setPortCacheKeyOrder(0);

            eq.addPortCacheKey(portCacheKey);

            em.persist(eq);
            commitTransaction(em);
        } catch (Exception e) {
            if (em != null && isTransactionActive(em)) {
                rollbackTransaction(em);
            }

            fail("En error occurred creating new equipment: " + e.getMessage());
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    protected void addPorts(EntityManagerFactory factory) {
        EntityManager em = null;
        try {
            em = factory.createEntityManager();

            beginTransaction(em);
            Query query = em.createNamedQuery("EquipmentCacheKey.findEquipmentById");
            query.setParameter("id", "eq");
            EquipmentCacheKey eq = (EquipmentCacheKey) query.getResultList().get(0);
            commitTransaction(em);

            em = factory.createEntityManager();
            beginTransaction(em);
            eq = em.merge(eq);

            PortCacheKey portCacheKey = new PortCacheKeyDAO();
            portCacheKey.setId("p2");
            portCacheKey.setPortCacheKeyOrder(1);
            eq.addPortCacheKey(portCacheKey);

            portCacheKey = new PortCacheKeyDAO();
            portCacheKey.setId("p3");
            portCacheKey.setPortCacheKeyOrder(2);
            eq.addPortCacheKey(portCacheKey);

            eq = em.merge(eq);
            commitTransaction(em);
        } catch (Exception e) {
            if (isTransactionActive(em)) {
                rollbackTransaction(em);
            }

            fail("En error occurred adding new ports: " + e.getMessage());
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    protected void verifyPorts(EntityManagerFactory factory) {
        EntityManager em = null;
        LogWrapper logWrapper = new LogWrapper();

        try {
            em = factory.createEntityManager();
            AbstractSession serverSession = ((JpaEntityManager)em).getServerSession();
            serverSession.setSessionLog(logWrapper);
            AbstractSessionLog.setLog(logWrapper);
            beginTransaction(em);
            Query query = em.createNamedQuery("EquipmentCacheKey.findEquipmentById");
            query.setParameter("id", "eq");
            EquipmentCacheKey eq = (EquipmentCacheKey) query.getResultList().get(0);
            commitTransaction(em);

            for (PortCacheKey portCacheKey : eq.getPorts()) {
                if (portCacheKey == null) {
                    fail("A null PORT was found in the collection of ports.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (isTransactionActive(em)) {
                rollbackTransaction(em);
            }

            fail("En error occurred fetching the results to verify: " + e.getMessage());
        } finally {
            if (em != null) {
                em.close();
            }
        }
        //Check that org.eclipse.persistence.internal.helper.ReadLockManager doesn't keep any CacheKey with NULL key.
        assertEquals(0, logWrapper.getMessageCount("locked by cache read lock manager has null primary key"));
    }
}
