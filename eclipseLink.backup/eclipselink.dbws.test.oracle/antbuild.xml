<?xml version="1.0"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0,
    or the Eclipse Distribution License v. 1.0 which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause

-->

<!--
  Contributors:
      egwin - initial API and implementation
      minorman - dbws oracle-specific test target
-->
<!-- This ant project includes the following tasks:
        - build (default): compiles, and packages all tests
        - clean: cleans up all generated files and dirs
        - compile: compiles all test classes
        - package: packages tests into eclipselink-dbws-oracle-depend-test.jar
        - test: Runs DBWS Oracle-specific tests
-->
<!--
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names (classpath fragments)
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatenated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatenated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
-->
<project name="eclipselink.dbws.test.oracle" default="build" basedir=".">

    <echo message="DBWSORCLTEST_BEGINS..."/>
    <!-- Test to make certain that build is run from component dir -->
    <available file="../${ant.project.name}" type="dir" property="dbws_test_oracle.is.local"/>
    <fail unless="dbws_test_oracle.is.local" message="Not running from '${ant.project.name}' directory"/>

   <!-- Primary Targets: "jar" separate for dev use -->
    <target name="build" depends="compile, package" description="build dbws oracle test jar"/>

    <!-- Initialization -->

    <target name="pre-init">
        <!-- Setup relative pathing for build -->
    <dirname  property="dbws_test_oracle.build.location_temp" file="${ant.file.eclipselink.dbws.test.oracle}"/>
    <pathconvert targetos="unix" property="dbws_test_oracle.build.location">
        <path>
            <pathelement location="${dbws_test_oracle.build.location_temp}"/>
        </path>
    </pathconvert>
    <condition property="dbws_test_oracle.2.base.dir" value="../.." else="..">
        <contains string="${dbws_test_oracle.build.location}" substring="dbws/${ant.project.name}"/>
    </condition>
    <property name="dbws_test_oracle.2.common.plugins.dir" value="${dbws_test_oracle.2.base.dir}/plugins"/>

        <!-- Allows tools.jar to be relative to JAVA_HOME. -->
        <property environment="env"/>

        <!-- Allows a user to overide certain user specific properties. -->
        <condition property="custom.bld.properties.message" value="Loading ${user.home}/build.properties..."
                   else="Notice: custom properties file '${user.home}/build.properties' not found to load.">
            <available file="${user.home}/build.properties"/>
        </condition>
        <echo message="${custom.bld.properties.message}"/>
        <property file="${user.home}/build.properties"/>
        <condition property="custom.cmd.properties.message" value="Loading ${test.properties}..."
                   else="Notice: custom properties file '${test.properties}' not found to load.">
            <available file="${test.properties}"/>
        </condition>
        <echo message="${custom.cmd.properties.message}"/>
        <property file="${test.properties}"/>
        <condition property="custom.tst.properties.message" value="Loading ${user.home}/test.properties..."
                   else="Notice: custom properties file '${user.home}/test.properties' not found to load.">
            <available file="${user.home}/test.properties"/>
        </condition>
        <echo message="${custom.tst.properties.message}"/>
        <property file="${user.home}/test.properties"/>
        <condition property="custom.local.properties.message" value="Loading ${basedir}/local.build.properties..."
                   else="Notice: custom properties file '${basedir}/local.build.properties' not found to load.">
            <available file="${basedir}/local.build.properties"/>
        </condition>
        <echo message="${custom.local.properties.message}"/>
        <property file="${basedir}/local.build.properties"/>
        <property file="${dbws_test_oracle.build.location}/antbuild.properties"/>
        <property file="${dbws_test_oracle.build.location}/${test.properties}"/>
        <property file="${dbws_test_oracle.build.location}/test.properties"/>

        <!-- JVM used to run tests -->
        <property name="test.junit.jvm" value="${env.JAVA_HOME}"/>
        <property name="test.junit.jvm.exec" value="${test.junit.jvm}/bin/java"/>
        <!-- Handle missing $JAVA_HOME/release file (Travis OpenJDK 8) -->
        <condition property="test.junit.jdk.JAVA_VERSION" value='"1.8.0"'>
            <not><available file="${test.junit.jvm}/release"/></not>
        </condition>
        <property prefix="test.junit.jdk" file="${test.junit.jvm}/release"/>

        <condition property="use.modules" value="true" else="false">
            <not>
                <matches pattern='"[1-8]\..*"' string="${test.junit.jdk.JAVA_VERSION}"/>
            </not>
        </condition>

        <!-- versioning -->
        <!-- These variables  are set in autobuild.xml. A manual build gets defaults -->
        <property name="version.qualifier" value="qualifier"/>
        <property name="version.string" value="${release.version}.${version.qualifier}"/>

        <!-- Local path variables -->
        <property name="dbws_test_oracle.src.dir"      value="${dbws_test_oracle.build.location}/${src.dir}"/>
        <property name="dbws_test_oracle.classes.dir"  value="${dbws_test_oracle.build.location}/${classes.dir}"/>
        <property name="dbws_test_oracle.report.dir"   value="${dbws_test_oracle.build.location}/${report.dir}"/>
        <property name="dbws_test_oracle.run.dir"      value="${dbws_test_oracle.build.location}/${run.dir}"/>
        <property name="dbws_test_oracle.etc.dir"      value="${dbws_test_oracle.build.location}/${etc.dir}"/>

        <property name="dbws_test_oracle.2.common.plugins.dir" value="${dbws_test_oracle.2.base.dir}/plugins"/>
        <property name="dbws_test_oracle.2.jpa.plugins.dir" value="${dbws_test_oracle.2.base.dir}/jpa/plugins"/>

        <!-- Give this a default value if not set in a user.home or test property file -->
        <property name="extensions.depend.dir" value="../${dbws_test_oracle.2.base.dir}/extension.lib.external"/>
        <property name="junit.lib"             value="${extensions.depend.dir}/junit.jar"/>
        <property name="tools.lib"             value="${env.JAVA_HOME}/lib/tools.jar"/>
        <property name="jacocoagent.lib"       value="${extensions.depend.dir}/${jacocoagent.jar}"/>

        <echo message="dbws_test_oracle.build.location ='${dbws_test_oracle.build.location}'"/>
        <echo message="dbws_test_oracle.2.base.dir     ='${dbws_test_oracle.2.base.dir}'"/>
        <echo message="dbws_test_oracle.src.dir        ='${dbws_test_oracle.src.dir}'"/>
        <echo message="dbws_test_oracle.etc.dir        ='${dbws_test_oracle.etc.dir}'"/>
        <echo message="dbws_test_oracle.classes.dir    ='${dbws_test_oracle.classes.dir}'"/>
        <echo message="dbws_test_oracle.report.dir     ='${dbws_test_oracle.report.dir}'"/>
        <echo message="dbws_test_oracle.run.dir        ='${dbws_test_oracle.run.dir}'"/>
        <echo message="user.home                       ='${user.home}'"/>
        <echo message="test.properties                 ='${test.properties}'"/>
        <echo message="extensions.depend.dir           ='${extensions.depend.dir}'"/>
        <echo message="junit.lib                       ='${junit.lib}'"/>
        <echo message="tools.lib                       ='${tools.lib}'"/>
        <echo message="jdk.version                     ='${test.junit.jdk.JAVA_VERSION}'"/>

        <!-- Determine availability of compile dependencies   -->
        <available file="${dbws_test_oracle.2.common.plugins.dir}/${asm.jar}" property="asm.bundle.exist"/>
        <available file="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar" property="core.bundle.exist"/>
        <available file="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.dbws_${version.string}.jar" property="dbws.bundle.exist"/>
        <available file="${dbws_test_oracle.2.base.dir}/${eclipselink.jar}" property="eclipselink.jar.exist"/>
        <available file="${dbws_test_oracle.classes.dir}" type="dir" property="dbws.classes.exist"/>
        <available classname="org.junit.Test" classpath="${junit.lib}" property="junit.jar.exist"/>
        <available file="${dbws_test_oracle.2.jpa.plugins.dir}/${persistence22.jar}" property="persistence.bundle.exist"/>
        <!-- Determine availability of runtime dependencies   -->
        <available file="${dbws_test_oracle.etc.dir}" type="dir" property="dbws.etc.exist"/>
        <available file="./${eclipselink.dbws.test.common.jar}" property="dbws_test_oracle.common.jar.exist"/>
        <available file="${jdbc.driver.jar}" property="jdbc.jar.exist"/>
        <available file="${tools.lib}"       property="tools.jar.exist"/>
        <!-- Determine where to get product classes, based upon availability  -->
        <condition property="use.eclipselink">
            <isset property="eclipselink.jar.exist"/>
        </condition>
        <condition property="use.bundles">
            <and>
                <isset property="asm.bundle.exist"/>
                <isset property="core.bundle.exist"/>
                <isset property="dbws.bundle.exist"/>
                <not><isset property="use.eclipselink"/></not>
            </and>
        </condition>
        <!-- Define system properties for resource processing and testing  -->
        <condition property="support.test">
            <and>
                <isset property="jdbc.jar.exist"/>
                <isset property="db.platform"/>
                <!-- bit too lenient, but means we don't have to change for Oracle12, Oracle13 .. -->
                <matches string="${db.platform}"
                         pattern="org.eclipse.persistence.platform.database.oracle.Oracle[0-9]{1,2}Platform"/>
            </and>
        </condition>
        <property name="test.class" value="**/OracleObjecttypeTest*,**/PLSQLcollectionTest*,**/VeearrayTest*"/>
        <property name="eclipselink.logging.level" value="${logging.level}"/>
        <propertyset id="test.run.propertyset" dynamic="false">
            <propertyref prefix="test.security-manager"/>
            <propertyref regex="db\.(?!pwd).*"/>
            <propertyref name="jdbc.driver.jar"/>
            <propertyref name="eclipselink.logging.level"/>
        </propertyset>
    </target>

    <target name="init-eclipselink" if="use.eclipselink">
        <path id="dbws_test_oracle.product.path" cache="true">
            <pathelement path="${dbws_test_oracle.2.base.dir}/${eclipselink.jar}"/>
        </path>
        <echo message="Using EclipseLink.jar as 'product' in compile dependency: ${toString:dbws_test_oracle.product.path}."/>
    </target>
    <target name="init-bundles" if="use.bundles">
        <path id="dbws_test_oracle.product.path" cache="true">
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/${asm.jar}"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.jpa_${version.string}.jar"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.moxy_${version.string}.jar"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.dbws_${version.string}.jar"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.oracle_${version.string}.jar"/>
            <pathelement path="${dbws_test_oracle.2.common.plugins.dir}/org.eclipse.persistence.oracle_*v20*.jar"/>
        </path>
        <echo message="Using EclipseLink OSGi bundles as 'product' in compile dependency ${toString:dbws_test_oracle.product.path}."/>
    </target>

    <target name="init-classpaths" unless="${use.modules}">
        <property name="test.javac.version" value="1.8"/>
        <property name="test.javac.args" value=""/>
        <property name="test.junit.jvm.modules.prop" value=""/>
        <path id="dbws_test_oracle.compile.module.path" cache="true"></path>
        <path id="dbws_test_oracle.upgrade.module.path" cache="true"></path>
        <path id="dbws_test_oracle.compile.core.path" cache="true">
            <path refid="dbws_test_oracle.product.path"/>
            <pathelement path="${junit.lib}"/>
            <pathelement path="${dbws_test_oracle.2.jpa.plugins.dir}/${persistence22.jar}"/>
        </path>
    </target>
    <target name="init-modulepaths" if="${use.modules}">
        <property name="test.javac.version" value="9"/>
        <property name="test.javac.args" value=""/>
        <property name="test.junit.jvm.modules.prop" value="--add-modules ${test.junit.jvm.modules}"/>
        <path id="dbws_test_oracle.compile.module.path" cache="true">
            <!--<pathelement path="${dbws_test_oracle.2.jpa.plugins.dir}/${persistence22.jar}"/>-->
        </path>
        <path id="dbws_test_oracle.upgrade.module.path" cache="true">
        </path>
        <path id="dbws_test_oracle.compile.core.path" cache="true">
            <path refid="dbws_test_oracle.product.path"/>
            <pathelement path="${junit.lib}"/>
            <pathelement path="${dbws_test_oracle.2.jpa.plugins.dir}/${persistence22.jar}"/>
        </path>
    </target>

    <target name="init" depends="pre-init, init-eclipselink, init-bundles, init-classpaths, init-modulepaths"
            description="Initialize the build">
        <condition property="use.failed">
            <and>
                <not><isset property="use.eclipselink"/></not>
                <not><isset property="use.bundles"/></not>
                <not><isset property="use.classes"/></not>
            </and>
        </condition>
        <fail message="Product classes do not exist anywhere! Compile product or populate jars." if="use.failed"/>

        <path id="dbws_test_oracle.compile.path" cache="true">
            <path refid="dbws_test_oracle.compile.core.path"/>
            <!--<pathelement path="${dbws_test_oracle.2.common.plugins.dir}/${connector.jar}"/>-->
        </path>
        <path id="dbws_test_oracle.run.path" cache="true">
            <pathelement path="${dbws_test_oracle.run.dir}"/>
            <pathelement path="${dbws_test_oracle.classes.dir}"/>
            <pathelement path="${jacocoagent.lib}"/>
            <path refid="dbws_test_oracle.compile.core.path"/>
            <pathelement path="${jdbc.driver.jar}"/>
        </path>
    </target>

    <target name="init-test-macro" depends="init">
        <macrodef name="test">
            <attribute name="include" />
            <attribute name="classpath" default="dbws_test_oracle.run.path"/>
            <attribute name="modulepath" default="dbws_test_oracle.compile.module.path"/>
            <attribute name="upgrademodulepath" default="dbws_test_oracle.upgrade.module.path"/>
            <sequential>
                <local name="junit.failed"/>
                <property name="additional.jvmargs" value=""/>
                <echo message="${line.separator}${line.separator}Running test on ${db.url}${line.separator}${line.separator}" />
                <echo message="JUnit settings:"/>
                <echo message="  test                         ='@{include}'"/>
                <echo message="  run.dir                      ='${dbws_test_oracle.run.dir}'"/>
                <echo message="  report.dir                   ='${dbws_test_oracle.report.dir}'"/>
                <echo message="  failonerror                  ='${fail.on.error}'"/>
                <echo message="Java settings:"/>
                <echo message="  jdk.version                  ='${test.junit.jdk.JAVA_VERSION}'"/>
                <echo message="  additional.jvmargs           ='${additional.jvmargs}'"/>
                <echo message="  maxmemory                    ='${max.heap.memory}'"/>
                <echo message="  java args                    ='${test.junit.jvm.modules.prop}'"/>
                <echo message="  module-path                  ='${toString:@{modulepath}}'"/>
                <echo message="  upgrade-module-path          ='${toString:@{upgrademodulepath}}'"/>
                <echo message="  class-path                   ='${toString:@{classpath}}'"/>
                <echo message="System properties:             ='${toString:test.run.propertyset}'"/>
                <echo message="  db.pwd                       ='**********'"/>
                <mkdir dir="${dbws_test_oracle.run.dir}"/>
                <mkdir dir="${dbws_test_oracle.report.dir}"/>
                <junit fork="yes" jvm="${test.junit.jvm.exec}" maxmemory="${max.heap.memory}"
                       dir="${dbws_test_oracle.run.dir}" showoutput="true" printsummary="yes" failureproperty="junit.failed">
                    <classpath refid="@{classpath}"/>
                    <modulepath refid="@{modulepath}"/>
                    <upgrademodulepath refid="@{upgrademodulepath}"/>
                    <jvmarg line="${test.junit.jvm.modules.prop}"/>
                    <jvmarg line="${additional.jvmargs}"/>
                    <syspropertyset refid="test.run.propertyset"/>
                    <sysproperty key="db.pwd" value="${db.pwd}"/>
                    <formatter type="xml"/>
                    <!--<formatter type="plain"/>-->
                    <batchtest haltonfailure="no" todir="${dbws_test_oracle.report.dir}">
                        <fileset dir="${dbws_test_oracle.src.dir}" includes="@{include}"/>
                    </batchtest>
                </junit>
                <fail message="TESTS FAILED !">
                    <condition>
                        <and>
                            <isset property="junit.failed"/>
                            <istrue value="${fail.on.error}"/>
                        </and>
                    </condition>
                </fail>
            </sequential>
        </macrodef>
    </target>
    <target name="init-report-macro" depends="pre-init">
        <macrodef name="generate-report">
            <attribute name="dir" default="${dbws_test_oracle.report.dir}"/>
            <sequential>
                <junitreport todir="@{dir}">
                    <fileset dir="@{dir}">
                        <include name="TEST-*.xml"/>
                    </fileset>
                    <report format="noframes" todir="@{dir}"/>
                </junitreport>
            </sequential>
        </macrodef>
    </target>

    <target name="init-testing" depends="init-test-macro, init-report-macro"/>

    <target name="test"  depends="compile, run-tests" description="run tests after building"/>

    <!-- clean -->
    <target name="clean" depends="pre-init" description="Clean generated files for common content">
        <delete dir="${dbws_test_oracle.classes.dir}" failonerror="false"/>
        <delete dir="${dbws_test_oracle.run.dir}" failonerror="false"/>
        <delete dir="${dbws_test_oracle.report.dir}" failonerror="false"/>
        <delete file="${dbws_test_oracle.build.location}/${eclipselink.dbws.oracle.test.jar}" failonerror="false"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init" description="Compile DBWS Util test Common classes">
        <!-- fail message="Cannot find junit: '${junit.lib}'." unless="junit.jar.exist"/ -->
        <echo message="Compiler settings:"/>
        <echo message="jdk.version          ='${test.junit.jdk.JAVA_VERSION}'"/>
        <echo message="srcdir               ='${dbws_test_oracle.src.dir}'"/>
        <echo message="destdir              ='${dbws_test_oracle.classes.dir}'"/>
        <echo message="debug/debuglevel     ='${javac.debug}'/'${javac.debuglevel}'"/>
        <echo message="source/target        ='${test.javac.version}'/'${test.javac.version}'"/>
        <echo message="deprecation          ='${javac.deprecation}'"/>
        <echo message="failonerror          ='${fail.on.error}'"/>
        <echo message="memoryMaximumSize    ='${max.heap.memory}'"/>
        <echo message="javac args           ='${test.javac.args}'"/>
        <echo message="module-path          ='${toString:dbws_test_oracle.compile.module.path}'"/>
        <echo message="upgrade-module-path  ='${toString:dbws_test_oracle.upgrade.module.path}'"/>
        <echo message="class-path           ='${toString:dbws_test_oracle.compile.path}'"/>
        <mkdir dir="${dbws_test_oracle.classes.dir}"/>
        <javac srcdir="${dbws_test_oracle.src.dir}" destdir="${dbws_test_oracle.classes.dir}"
               debug="${javac.debug}" debuglevel="${javac.debuglevel}"
               encoding="UTF-8" deprecation="${javac.deprecation}"
               source="${test.javac.version}" target="${test.javac.version}"
               failonerror="${fail.on.error}"
               memoryMaximumSize="${max.heap.memory}"
               includes="dbws/testing/**"
               classpathref="dbws_test_oracle.compile.path"
               modulepathref="dbws_test_oracle.compile.module.path"
               upgrademodulepathref="dbws_test_oracle.upgrade.module.path"
               fork="true" >
            <compilerarg line="${test.javac.args}"/>
        </javac>
    </target>

    <!-- package -->
    <target name="package" depends="compile" description="package DBWS Util Oracle Test Common jar">
        <jar jarfile="./${eclipselink.dbws.oracle.test.jar}">
            <fileset dir="${dbws_test_oracle.classes.dir}">
                <include name="dbws/testing/**/*.class"/>
            </fileset>
        </jar>
    </target>

    <!-- *** Test execution targets *** -->
    <target name="run-tests" if="support.test" depends="init-testing" description="setup, compile, and run dbws util testsuites">
        <sql userid="${db.user}" password="${db.pwd}"
             driver="${db.driver}"
             url="${db.url}"
             classpath="${jdbc.driver.jar}"
             keepformat="true" delimiter="|"
             onerror="continue">
            <fileset dir="${dbws_test_oracle.etc.dir}">
                <include name="dbsetup_*.sql"/>
            </fileset>
        </sql>
        <test include="${test.class}"/>
        <sql userid="${db.user}" password="${db.pwd}"
             driver="${db.driver}"
             url="${db.url}"
             classpath="${jdbc.driver.jar}"
             keepformat="true" delimiter="|"
             onerror="continue">
            <fileset dir="${dbws_test_oracle.etc.dir}">
                <include name="dbteardown_*.sql"/>
            </fileset>
        </sql>
        <generate-report/>
    </target>

</project>
